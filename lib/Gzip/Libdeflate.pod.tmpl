[% start_year=2021 %]
[% MACRO example(file) BLOCK %]
[%- pl =  file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://fastapi.metacpan.org/source/BKB/Gzip-Libdeflate-[% info.version %]/examples/[% pl %]> in the distribution.)
[% END %]
[% MACRO since(version) BLOCK -%]
This method was added in version [% version %] of the module.
[%- END %]
=encoding UTF-8

=head1 NAME

[% info.colon %] - Libdeflate compression library

=head1 SYNOPSIS

[% example("synopsis") %]

=head1 VERSION

This documents version [% info.version %] of [% info.name %]
corresponding to L<git commit [% commit.commit %]|[% info.repo
%]/commit/[% commit.commit %]> released on [% commit.date %]. This
distribution also includes libdeflate version [% libdeflate_version
%]. 

=head1 DESCRIPTION

This module provides an interface to libdeflate. Libdeflate is a
newly-written compression library which offers the same C<deflate>
form of compression as zlib, as used in gzip, libpng and many similar
utilities. This distribution includes libdeflate within itself, so it
is not necessary to have that on your system.

=head1 METHODS

=head2 compress

    my $comp_thing = $gl->compress ($thing);

Compress input C<$thing> using whatever compression level and type you
have specified for C<$gl> in L</new>.

=head2 compress_file

    my $out = $gl->compress_file (%options);

File to compressed scalar:

    my $out = $gl->compress_file (in => $file);

File to compressed file:

    $gl->compress_file (in => $file, out => "$file.gz");

Scalar to compressed file:

    $gl->compress_file (from => $uncompressed, out => "$file.gz");

This is a convenience method which uses L</File::Slurper> to read and
write the binary files. 

For the opposite operation, see L</decompress_file>.

[% since("0.03") %]

=head2 decompress

    my $thing = $gl->decompress ($dthing);

Decompress C<$comp_thing> into C<$thing>. If you have chosen the
C<zlib> or C<deflate> options in L</new>, you also need to
specify the expected size of C<$thing>.

    my $thing = $gl->decompress ($dthing, 1000);

In the C<gzip> format, the size is stored within the data itself, so
it doesn't need to be specified.

=head2 decompress_file

    my $out = $gl->decompress_file (%options);

Compressed file to scalar:

    my $out = $gl->decompress_file (in => $file);

Compressed file to file:

    $gl->decompress_file (in => "$file.gz", out => $file);

Compressed scalar to file:

    $gl->decompress_file (from => $compressed, out => $file);

If using C<zlib> or C<deflate> compression, a numerical size must also
be specified.

    $gl->decompress_file (in => $zlib_file, out => $file, size => 9999);

This is a convenience method which uses L</File::Slurper> to read and
write the binary files.

For the opposite operation, see L</compress_file>.

[% since("0.03") %]

=head2 get_level

    my $level = $gl->get_level ();

Retrieve the level of compression as a number.

[% since("0.03") %]

=head2 get_type

    my $type = $gl->get_type ();

Retrieve the type of compression from an object as a string, either
C<deflate>, C<gzip> (the default), or C<zlib>.

[% since("0.03") %]

=head2 new

    my $gl = Gzip::Libdeflate->new (%options);

Possible options are

=over

=item level

    my $gl = Gzip::Libdeflate->new (level => 9);

A numerical argument of compression level from 1 (fast and poor
compression) to 12 (slow and good compression).  If you do not specify
it, the default is 6. These correspond to the compression levels of
zlib, but with extra compression levels 10-12 also added. See L</About
libdeflate> for details. 

As with zlib, there is also a "zero compression" option of level 0
which just puts the input into the gzip format without compressing it
at all.

=item type

    my $gl = Gzip::Libdeflate->new (type => 'deflate');

Change the type of compression. The default is type C<gzip> but you
can also choose C<deflate> and C<zlib>. These are all the same thing
up to headers.

=back

=head1 ERROR HANDLING

Errors are handled by warning and then returning an undefined value.

=head1 DEPENDENCIES

=over

=item L<File::Slurper>

File::Slurper is used by L</compress_file> and L</decompress_file> to
read and write binary data.

=back

=head1 SEE ALSO

=head2 About libdeflate

Libdeflate is a new library which offers the same form of deflate
compression as offered by C<zlib>. From its README:

=over

libdeflate is a library for fast, whole-buffer DEFLATE-based
compression and decompression.

=back

See the L<Libdeflate github
repository|https://github.com/ebiggers/libdeflate> for full
information.

=head2 CPAN modules

=over

=item L<Alien::libdeflate>

=back

[% INCLUDE "author" %]

Libdeflate's copyright and licence are as follows.

[% INCLUDE "libd-copyr" %]

